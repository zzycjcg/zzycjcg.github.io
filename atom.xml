<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>志勇的博客</title>
  <subtitle>记录学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zzycjcg.github.io/"/>
  <updated>2018-03-06T01:56:55.032Z</updated>
  <id>https://zzycjcg.github.io/</id>
  
  <author>
    <name>朱志勇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mybatis技巧之foreach递归</title>
    <link href="https://zzycjcg.github.io/2017/08/21/mybatis%E6%8A%80%E5%B7%A7%E4%B9%8Bforeach%E5%B5%8C%E5%A5%97/"/>
    <id>https://zzycjcg.github.io/2017/08/21/mybatis技巧之foreach嵌套/</id>
    <published>2017-08-21T09:45:06.000Z</published>
    <updated>2018-03-06T01:56:55.032Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis的foreach已经用得很熟了，可如果foreach存在递归时，该怎么用？</p>
<a id="more"></a>
<p>##起因<br>在项目中，有个接口存在循环查询数据库的情况，需要改造成批量查询；这个批量查询比较特殊的地方是，<br>数据库是分表：根据主键id分表。一般的foreach都是针对单表的，典型的使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select</div><div class="line">&lt;include refid=&quot;allColumns&quot; /&gt;</div><div class="line">from table_demo</div><div class="line">where id in </div><div class="line">&lt;foreach collection=&quot;ids&quot; item=&quot;it&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</div><div class="line">		#&#123;it&#125;</div><div class="line">&lt;/foreach&gt;</div></pre></td></tr></table></figure></p>
<p>##union<br>针对分表的批量查询，可以想象成对多张表的批量，多张表的批量又可以使用<strong>union</strong><br>将结果合并成一个结果集，批量的sql应该如下结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select &lt;include refid=&quot;allColumns&quot; /&gt; from table_demo_001 where id in (1,2,3)</div><div class="line">union</div><div class="line">select &lt;include refid=&quot;allColumns&quot; /&gt; from table_demo_002 where id in (101,201,301)</div><div class="line">union</div><div class="line">select &lt;include refid=&quot;allColumns&quot; /&gt; from table_demo_003 where id in (1001,2001,3001);</div></pre></td></tr></table></figure></p>
<p>这里有个问题：mysql是否对union的个数有限制？</p>
<p>##sqlmap nested foreach<br>既然明确了最终的sql结构，那么就可以根据这个目标构造sqlmap;<br>Java构造参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, List&lt;Long&gt;&gt; tbIdsMap = new HashMap&lt;&gt;();</div><div class="line">for (Long id:ids) &#123;</div><div class="line">    // 根据id取得分表后缀，即table_demo_001的&apos;001&apos;</div><div class="line">    String tb = getTbSuffix(id);</div><div class="line">    List&lt;Long&gt; ids = tbIdsMap.get(tb);</div><div class="line">    if (ids==null) &#123;</div><div class="line">        ids = new ArrayList&lt;&gt;();</div><div class="line">        tbIdsMap.put(tb, ids);</div><div class="line">    &#125;</div><div class="line">    ids.add(cid);</div><div class="line">&#125;</div><div class="line">Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();</div><div class="line">// 给对象添加一个变量名</div><div class="line">params.put(&quot;map&quot;, tbIdsMap);</div><div class="line">return selectList(&quot;findByIds&quot;, params);</div></pre></td></tr></table></figure></p>
<p>生成sqlmap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;foreach collection=&quot;map.keys&quot; item=&quot;key&quot; open=&quot; &quot; separator=&quot;union&quot; close=&quot; &quot; &gt;</div><div class="line">    select</div><div class="line">    &lt;include refid=&quot;fields&quot; /&gt;</div><div class="line">    from consumer_$&#123;key&#125;</div><div class="line">    where id in</div><div class="line">    &lt;foreach collection=&quot;map[key]&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; &gt;</div><div class="line">        #&#123;id&#125;</div><div class="line">    &lt;/foreach&gt;</div><div class="line">&lt;/foreach&gt;</div></pre></td></tr></table></figure></p>
<p>这里有2个地方要留意：<br>1.key的引用方式：应该是${key}而不是#{key}，区别主要在于$输出变量内容，会去掉字符串的单引号，<br>但#则会保留；<br>2.map[key]相当于map.get(“key”)，是根据key拿到value</p>
<p>这里还有一个不太合理的地方，是遍历的方式，如果能使用map.entrySet()方式遍历，效率会更高，可惜试了很多种<br>情况，一直报错，只能委曲求全使用map.keys()+map.get(“key”)的组合方式。如果有人有更好的方式，请告知我。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis的foreach已经用得很熟了，可如果foreach存在递归时，该怎么用？&lt;/p&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="https://zzycjcg.github.io/tags/mybatis/"/>
    
      <category term="foreach" scheme="https://zzycjcg.github.io/tags/foreach/"/>
    
      <category term="nested" scheme="https://zzycjcg.github.io/tags/nested/"/>
    
      <category term="分表" scheme="https://zzycjcg.github.io/tags/%E5%88%86%E8%A1%A8/"/>
    
      <category term="union" scheme="https://zzycjcg.github.io/tags/union/"/>
    
  </entry>
  
  <entry>
    <title>mybatis技巧之foreach递归</title>
    <link href="https://zzycjcg.github.io/2017/08/21/mybatis%E6%8A%80%E5%B7%A7%E4%B9%8Bforeach%E9%80%92%E5%BD%92/"/>
    <id>https://zzycjcg.github.io/2017/08/21/mybatis技巧之foreach递归/</id>
    <published>2017-08-21T09:45:06.000Z</published>
    <updated>2018-03-06T01:56:55.033Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis的foreach已经用得很熟了，可如果foreach存在递归时，该怎么用？</p>
<a id="more"></a>
<p>##起因<br>在项目中，有个接口存在循环查询数据库的情况，需要改造成批量查询；这个批量查询比较特殊的地方是，<br>数据库是分表：根据主键id分表。一般的foreach都是针对单表的，典型的使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select</div><div class="line">&lt;include refid=&quot;allColumns&quot; /&gt;</div><div class="line">from table_demo</div><div class="line">where id in </div><div class="line">&lt;foreach collection=&quot;ids&quot; item=&quot;it&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</div><div class="line">		#&#123;it&#125;</div><div class="line">&lt;/foreach&gt;</div></pre></td></tr></table></figure></p>
<p>##union<br>针对分表的批量查询，可以想象成对多张表的批量，多张表的批量又可以使用<strong>union</strong><br>将结果合并成一个结果集，批量的sql应该如下结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select &lt;include refid=&quot;allColumns&quot; /&gt; from table_demo_001 where id in (1,2,3)</div><div class="line">union</div><div class="line">select &lt;include refid=&quot;allColumns&quot; /&gt; from table_demo_002 where id in (101,201,301)</div><div class="line">union</div><div class="line">select &lt;include refid=&quot;allColumns&quot; /&gt; from table_demo_003 where id in (1001,2001,3001);</div></pre></td></tr></table></figure></p>
<p>这里有个问题：mysql是否对union的个数有限制？</p>
<p>##sqlmap nested foreach<br>既然明确了最终的sql结构，那么就可以根据这个目标构造sqlmap;<br>Java构造参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, List&lt;Long&gt;&gt; tbIdsMap = new HashMap&lt;&gt;();</div><div class="line">for (Long id:ids) &#123;</div><div class="line">    // 根据id取得分表后缀，即table_demo_001的&apos;001&apos;</div><div class="line">    String tb = getTbSuffix(id);</div><div class="line">    List&lt;Long&gt; ids = tbIdsMap.get(tb);</div><div class="line">    if (ids==null) &#123;</div><div class="line">        ids = new ArrayList&lt;&gt;();</div><div class="line">        tbIdsMap.put(tb, ids);</div><div class="line">    &#125;</div><div class="line">    ids.add(cid);</div><div class="line">&#125;</div><div class="line">Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();</div><div class="line">// 给对象添加一个变量名</div><div class="line">params.put(&quot;map&quot;, tbIdsMap);</div><div class="line">return selectList(&quot;findByIds&quot;, params);</div></pre></td></tr></table></figure></p>
<p>生成sqlmap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;foreach collection=&quot;map.keys&quot; item=&quot;key&quot; open=&quot; &quot; separator=&quot;union&quot; close=&quot; &quot; &gt;</div><div class="line">    select</div><div class="line">    &lt;include refid=&quot;fields&quot; /&gt;</div><div class="line">    from consumer_$&#123;key&#125;</div><div class="line">    where id in</div><div class="line">    &lt;foreach collection=&quot;map[key]&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot; &gt;</div><div class="line">        #&#123;id&#125;</div><div class="line">    &lt;/foreach&gt;</div><div class="line">&lt;/foreach&gt;</div></pre></td></tr></table></figure></p>
<p>这里有2个地方要留意：<br>1.key的引用方式：应该是${key}而不是#{key}，区别主要在于$输出变量内容，会去掉字符串的单引号，<br>但#则会保留；<br>2.map[key]相当于map.get(“key”)，是根据key拿到value</p>
<p>这里还有一个不太合理的地方，是遍历的方式，如果能使用map.entrySet()方式遍历，效率会更高，可惜试了很多种<br>情况，一直报错，只能委曲求全使用map.keys()+map.get(“key”)的组合方式。如果有人有更好的方式，请告知我。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mybatis的foreach已经用得很熟了，可如果foreach存在递归时，该怎么用？&lt;/p&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="https://zzycjcg.github.io/tags/mybatis/"/>
    
      <category term="foreach" scheme="https://zzycjcg.github.io/tags/foreach/"/>
    
      <category term="nested" scheme="https://zzycjcg.github.io/tags/nested/"/>
    
      <category term="分表" scheme="https://zzycjcg.github.io/tags/%E5%88%86%E8%A1%A8/"/>
    
      <category term="union" scheme="https://zzycjcg.github.io/tags/union/"/>
    
  </entry>
  
  <entry>
    <title>多git账号使用</title>
    <link href="https://zzycjcg.github.io/2017/01/25/%E5%A4%9Agit%E8%B4%A6%E5%8F%B7%E4%BD%BF%E7%94%A8/"/>
    <id>https://zzycjcg.github.io/2017/01/25/多git账号使用/</id>
    <published>2017-01-24T20:22:26.000Z</published>
    <updated>2018-03-06T01:56:55.033Z</updated>
    
    <content type="html"><![CDATA[<p>相信不少同学公司在同时使用gitlab和gitlab登，在这种情况下，<br>在一台机器环境下，如何做到能同时使用2种git?</p>
<a id="more"></a>
<p>1.添加配置区分不同域的git仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># gitlab2</div><div class="line">Host gitlab2.dui88.com</div><div class="line">User git</div><div class="line">Hostname gitlab2.dui88.com</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line"></div><div class="line"># github</div><div class="line">Host github.com</div><div class="line">User git</div><div class="line">Hostname github.com</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/github_zzy_rsa</div></pre></td></tr></table></figure></p>
<p>将内容保存为config文件后，保存到~/.ssh目录<br>将公司和GitHub的public key配置好<br>测试配置是否OK：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#测试github</div><div class="line">ssh -T git@github.com</div><div class="line">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div><div class="line"></div><div class="line">#测试公司git</div><div class="line">ssh -T git@gitlab2.dui88.com</div><div class="line">Welcome to GitLab, xxx!</div></pre></td></tr></table></figure></p>
<p>接下来就可以正常使用2个仓库了</p>
<p>2.区分user和email<br>不过，还有一点需要留意，因为我们在初始化git时，配置了user和email，是全局范围，这样两个仓库都会使用这个全局的配置<br>如果2个git的user，email是一样的也没什么问题，对于不同的情况，需要在仓库中写入本地配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --local user.name &apos;xxx&apos;</div><div class="line">git config --local user.email &apos;xxx@compary.com&apos;</div></pre></td></tr></table></figure></p>
<p>参考:<br><a href="https://segmentfault.com/q/1010000000835302" target="_blank" rel="external">https://segmentfault.com/q/1010000000835302</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信不少同学公司在同时使用gitlab和gitlab登，在这种情况下，&lt;br&gt;在一台机器环境下，如何做到能同时使用2种git?&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://zzycjcg.github.io/tags/git/"/>
    
      <category term="mutli user" scheme="https://zzycjcg.github.io/tags/mutli-user/"/>
    
      <category term="git config" scheme="https://zzycjcg.github.io/tags/git-config/"/>
    
  </entry>
  
  <entry>
    <title>git生成sshkey</title>
    <link href="https://zzycjcg.github.io/2017/01/25/git%E7%94%9F%E6%88%90sshkey/"/>
    <id>https://zzycjcg.github.io/2017/01/25/git生成sshkey/</id>
    <published>2017-01-24T19:44:08.000Z</published>
    <updated>2018-03-06T01:56:55.032Z</updated>
    
    <content type="html"><![CDATA[<p>ssh-keygen -t rsa -b 4096 -C “your_email@example.com”<br>ref: <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ssh-keygen -t rsa -b 4096 -C “your_email@example.com”&lt;br&gt;ref: &lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-addi
    
    </summary>
    
    
      <category term="git" scheme="https://zzycjcg.github.io/tags/git/"/>
    
      <category term="sshkey" scheme="https://zzycjcg.github.io/tags/sshkey/"/>
    
  </entry>
  
  <entry>
    <title>root无法使用ssh或sftp的问题</title>
    <link href="https://zzycjcg.github.io/2016/10/05/root%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8ssh%E6%88%96sftp%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://zzycjcg.github.io/2016/10/05/root无法使用ssh或sftp的问题/</id>
    <published>2016-10-05T03:25:44.000Z</published>
    <updated>2018-03-06T01:56:55.033Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，安装好ssh后，是不能用root登陆使用的，google了一把，原来是被Ubuntu禁用了。<br><br>直接上配置：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#修改/etc/ssh/sshd_config</div><div class="line">vi /etc/ssh/sshd_config</div><div class="line"># allow root ssh login: 1.comment &apos;without-password&apos;; 2.add yes</div><div class="line">#PermitRootLogin without-password</div><div class="line">PermitRootLogin yes</div><div class="line">#重启ssh服务</div><div class="line">service ssh restart</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认情况下，安装好ssh后，是不能用root登陆使用的，google了一把，原来是被Ubuntu禁用了。&lt;br&gt;&lt;br&gt;直接上配置：&lt;/p&gt;
    
    </summary>
    
    
      <category term="sshd" scheme="https://zzycjcg.github.io/tags/sshd/"/>
    
  </entry>
  
  <entry>
    <title>Redis单机多实例配置</title>
    <link href="https://zzycjcg.github.io/2016/09/29/Redis%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%85%8D%E7%BD%AE/"/>
    <id>https://zzycjcg.github.io/2016/09/29/Redis单机多实例配置/</id>
    <published>2016-09-29T14:52:50.000Z</published>
    <updated>2018-03-06T01:56:55.032Z</updated>
    
    <content type="html"><![CDATA[<p>apt-get install redis-server安装redis后，默认是单点redis，为了研究redis集群，决定在单机上配置多个redis实例。<br>所谓redis实例，就是指多个redis进程，它们分别监听多个端口，单独都可以提供服务。</p>
<a id="more"></a>
<h2 id="拷贝文件配置并修改"><a href="#拷贝文件配置并修改" class="headerlink" title="拷贝文件配置并修改"></a>拷贝文件配置并修改</h2><p>安装好redis之后，默认会在/etc/redis下存放2个配置文件：redis-server.conf、sentinel.conf，分别是redis服务端配置和redis哨兵配置。<br>使用已经存在的6379端口示例配置，拷贝一份新的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">user@ubuntu:/etc/redis$ sudo cp redis.conf 6380.conf</div><div class="line">vi 6380.conf</div><div class="line">#修改pidfile</div><div class="line">pidfile /var/run/redis/redis-6380.pid</div><div class="line">#修改port</div><div class="line">port 6380</div><div class="line">#修改bind (O)</div><div class="line">bind 0.0.0.0</div><div class="line">#修改logfile</div><div class="line">logfile /var/log/redis/redis-6380.log</div><div class="line">#修改dump file name</div><div class="line">dbfilename dump-6380.rdb</div></pre></td></tr></table></figure></p>
<p>最后，将默认的redis-server.conf也修改为redis-6379.conf，使命名风格统一。在后面会看到，配置文件命名风格统一后可以很方便统一配置自启动脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv redis-server.conf redis-6379.conf</div></pre></td></tr></table></figure></p>
<p>同时也修改pidfile，logfile，dumpname</p>
<h2 id="完成conf关联的修改"><a href="#完成conf关联的修改" class="headerlink" title="完成conf关联的修改"></a>完成conf关联的修改</h2><p>这一步是可选的，因为如果不配置，redis在启动时会帮我们自动创建。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#pidfile</div><div class="line">cd /var/run/redis/</div><div class="line">touch redis-6380.pid</div><div class="line">#log file</div><div class="line">cd /var/log/redis/</div><div class="line">sudo touch redis-6380.log</div></pre></td></tr></table></figure></p>
<h2 id="redis自启动脚本修改"><a href="#redis自启动脚本修改" class="headerlink" title="redis自启动脚本修改"></a>redis自启动脚本修改</h2><h3 id="修改6379实例配置"><a href="#修改6379实例配置" class="headerlink" title="修改6379实例配置"></a>修改6379实例配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#进入自动启动脚本目录</div><div class="line">cd /etc/init.d</div><div class="line">#找到redis启动脚本</div><div class="line">ll | grep redis</div></pre></td></tr></table></figure>
<p>默认为看到一个redis-server的脚本，修改redis-server名称，即redis-6379<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv redis-server redis-6379</div><div class="line">vi redis-6379</div></pre></td></tr></table></figure></p>
<p>将脚本前面的变量定义修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#定义redis实例名称</div><div class="line">REDIS_INSTANCE=&quot;redis-6379&quot;</div><div class="line">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</div><div class="line">DAEMON=/usr/bin/redis-server</div><div class="line">#引用redis实例变量</div><div class="line">DAEMON_ARGS=/etc/redis/$&#123;REDIS_INSTANCE&#125;.conf</div><div class="line">NAME=$&#123;REDIS_INSTANCE&#125;</div><div class="line">DESC=$&#123;REDIS_INSTANCE&#125;</div><div class="line"></div><div class="line">RUNDIR=/var/run/redis</div><div class="line">PIDFILE=$RUNDIR/$&#123;REDIS_INSTANCE&#125;.pid</div></pre></td></tr></table></figure></p>
<h3 id="增加6380实例配置"><a href="#增加6380实例配置" class="headerlink" title="增加6380实例配置"></a>增加6380实例配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#拷贝一份6379脚本</div><div class="line">cp redis-6379 redis-6380</div><div class="line">#修改实例名称</div><div class="line">REDIS_INSTANCE=&quot;redis-6380&quot;</div></pre></td></tr></table></figure>
<h3 id="更新自启动"><a href="#更新自启动" class="headerlink" title="更新自启动"></a>更新自启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#先删掉旧的redis-server启动</div><div class="line">update-rc.d –f redis-server remove</div><div class="line">#添加6379自启动</div><div class="line">update-rc.d redis-6379 defaults</div><div class="line">#添加6380自启动</div><div class="line">update-rc.d redis-6380 defaults</div></pre></td></tr></table></figure>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#分别启动6379和6380实例</div><div class="line">service redis-6379 start</div><div class="line">service redis-6380 start</div><div class="line">#查询启动的redis进程</div><div class="line">ps -ef | grep redis-server | grep -v grep</div></pre></td></tr></table></figure>
<p><img src="/images/redis-pid-1.png" alt="Redis进程"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#查看redis信息</div><div class="line">redis-cli –h 192.168.1.111 –p 6379</div><div class="line">192.168.1.111:6379&gt;info replication</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#reboot验证看Ubuntu启动时，2个redis实例是否自动启动</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>总体来说，配置还是很简单的，但才开始玩redis，很是不熟，google了不少blog学习，redis实例本身配置这块是很简单的。主要的问题在启动脚本：</p>
<ul>
<li><p>问题1：自启动脚本启动后无法启动。<br>开始参照一篇blog[1]，给、/etc/init.d/redis-6379建软链接，去掉第一行的变量定义，改为通过获取启动命令获取实例名称。这样通过service启动成功，但是重启后怎么也启动不了，一开始怀疑是添加自启动未生效，还弄了好半天，结果无解；最后修改变量获取方法，定义实例常量值，结果成功了。由此得出结论，Ubuntu启动时，调用启动命令方式不是service xxx start<br>  #通过service启动，用basename可以把redis-6379读取作为实例名称<br>  service redis-6379 start</p>
</li>
<li><p>问题2：service redis-6379 status无效<br>需要跟踪status问题原因并解决。<br>  #service redis-6379 status查看状态永远是not running<br>  service redis-6379 status<br>  <img src="/images/redis-status-1.png" alt="Redis状态"></p>
</li>
<li><p>遗留问题：</p>
<ol>
<li>Ubuntu系统启动时，是如何来调用启动脚本来启动需要自启动的应用的？</li>
<li>是否可以优化脚本，在一个启动脚本里面循环拉起多个redis启动？</li>
<li>service redis-6379 status命名问题出在哪？如何修改？</li>
</ol>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://support.pivotal.io/hc/en-us/articles/206087627-How-to-setup-and-run-mulitple-Redis-server-instances-on-a-Linux-host" target="_blank" rel="external">How-to-setup-and-run-mulitple-Redis-server-instances-on-a-Linux-host</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;apt-get install redis-server安装redis后，默认是单点redis，为了研究redis集群，决定在单机上配置多个redis实例。&lt;br&gt;所谓redis实例，就是指多个redis进程，它们分别监听多个端口，单独都可以提供服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://zzycjcg.github.io/tags/redis/"/>
    
      <category term="sentinel" scheme="https://zzycjcg.github.io/tags/sentinel/"/>
    
  </entry>
  
</feed>
